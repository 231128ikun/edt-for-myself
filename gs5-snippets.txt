/**
 * Cloudflare Worker - VLESS over WS → 全局 SOCKS5 转发
 *
 * ✅ 支持的 SOCKS5 参数格式（path 或 query）：
 *  1. /socks5=user:pass@host:port
 *  2. /?socks5=user:pass@host:port
 *  3. /socks://BASE64(user:pass)@host:port
 *  4. /socks5://user:pass@host:port
 *  5. /socks5://BASE64(user:pass)@host:port
 *
 * ✅ 手搓节点示例（vless:// 链接）：
 * vless://<UUID>@<your-worker-domain>:443?encryption=none&security=tls&type=ws&host=<your-worker-domain>&path=/socks5=user:pass@1.2.3.4:1080#MyNode
 */

import{connect}from'cloudflare:sockets';
const I='aaa6b096-1165-4bbe-935c-99f4ec902d02';
const GS5=false; // true=全局SOCKS5, false=直连优先，失败回退SOCKS5
const IB=new Uint8Array(I.replace(/-/g,'').match(/.{2}/g).map(x=>parseInt(x,16)));

const socks5Connect=async(s5,th,tp)=>{
    const s=connect({hostname:s5.host,port:s5.port});
    await s.opened;
    const w=s.writable.getWriter(),r=s.readable.getReader();
    try{
        if(s5.user||s5.pass){
            await w.write(new Uint8Array([5,2,0,2]));
            let m=(await r.read()).value;
            if(m&&m[1]===2){
                const u=new TextEncoder().encode(s5.user||''),p=new TextEncoder().encode(s5.pass||'');
                await w.write(new Uint8Array([1,u.length,...u,p.length,...p]));
                await r.read();
            }
        }else{
            await w.write(new Uint8Array([5,1,0]));
            await r.read();
        }
        const db=new TextEncoder().encode(th);
        await w.write(new Uint8Array([5,1,0,3,db.length,...db,tp>>8,tp&255]));
        await r.read();
        w.releaseLock();
        r.releaseLock();
        return s;
    }catch(e){
        try{w.releaseLock();r.releaseLock()}catch{}
        try{s.close()}catch{}
        throw e;
    }
};

export default{
    async fetch(r){
        if(r.headers.get('Upgrade')!=='websocket')return new Response('');
        const u=new URL(r.url),p=u.searchParams.get('socks5')||u.pathname.slice(1)||'';
        let s5=null;
        if(p){
            let r=p;
            if(r.startsWith('socks5='))r=r.slice(7);
            else if(r.startsWith('socks5://'))r=r.slice(9);
            else if(r.startsWith('socks://'))r=r.slice(8);
            try{r=decodeURIComponent(r)}catch{}
            
            const a=r.indexOf('@');
            if(a>0){
                let c=r.slice(0,a),s=r.slice(a+1);
                
                if(c.includes('=')){
                    try{
                        const d=atob(c.replace(/-/g,'+').replace(/_/g,'/'));
                        if(d.includes(':'))c=d;
                    }catch{}
                }
                
                const i=c.indexOf(':');
                let u='',pw='';
                if(i>0){u=c.slice(0,i);pw=c.slice(i+1)}
                else u=c;
                const sp=s.split(':'),h=sp[0],pt=sp[1]||'1080';
                if(h)s5={user:u,pass:pw,host:h,port:+pt};
            }else{
                const sp=r.split(':'),h=sp[0],pt=sp[1]||'1080';
                if(h)s5={user:'',pass:'',host:h,port:+pt};
            }
        }
        if(!s5)return new Response('No SOCKS5',{status:400});
        
        const[cl,ws]=Object.values(new WebSocketPair());
        ws.accept();
        let rm=null,dns=0;
        
        new ReadableStream({
            start(c){
                ws.addEventListener('message',e=>{
                    if(e.data instanceof ArrayBuffer||ArrayBuffer.isView(e.data))c.enqueue(e.data)
                });
                ws.addEventListener('close',()=>{try{rm?.close()}catch{}});
            }
        }).pipeTo(new WritableStream({
            async write(d){
                const u8=d instanceof Uint8Array?d:new Uint8Array(d);
                if(dns){
                    try{
                        const resp=await fetch('https://1.1.1.1/dns-query',{
                            method:'POST',
                            headers:{'content-type':'application/dns-message'},
                            body:u8.slice(2)
                        });
                        if(ws.readyState===1){
                            const result=new Uint8Array(await resp.arrayBuffer());
                            ws.send(new Uint8Array([0,0,result.length>>8,result.length&255,...result]));
                        }
                    }catch{}
                    return;
                }
                if(rm){
                    const w=rm.writable.getWriter();
                    await w.write(u8);
                    w.releaseLock();
                    return;
                }
                if(u8.length<24)return;
                for(let i=0;i<16;i++)if(u8[1+i]!==IB[i])return;
                const v=new DataView(u8.buffer),o=v.getUint8(17),c=v.getUint8(18+o);
                let p=19+o,pt=v.getUint16(p),a=v.getUint8(p+2);
                p+=3;
                let ad='';
                if(a===1){
                    ad=`${v.getUint8(p)}.${v.getUint8(p+1)}.${v.getUint8(p+2)}.${v.getUint8(p+3)}`;
                    p+=4;
                }else if(a===2){
                    const l=v.getUint8(p++);
                    ad=new TextDecoder().decode(u8.subarray(p,p+l));
                    p+=l;
                }else return;
                
                const h=new Uint8Array([u8[0],0]),pl=u8.subarray(p);
                
                if(c===2&&pt===53){
                    dns=1;
                    try{
                        const resp=await fetch('https://1.1.1.1/dns-query',{
                            method:'POST',
                            headers:{'content-type':'application/dns-message'},
                            body:pl
                        });
                        if(ws.readyState===1){
                            const result=new Uint8Array(await resp.arrayBuffer());
                            ws.send(new Uint8Array([...h,result.length>>8,result.length&255,...result]));
                        }
                    }catch{}
                    return;
                }
                if(c!==1)return;
                
                try{
                    // 根据GS5变量选择连接逻辑
                    if(GS5){
                        // 全局SOCKS5模式：直接走SOCKS5
                        rm=await socks5Connect(s5,ad,pt);
                    }else{
                        // 回退模式：先直连，失败后走SOCKS5
                        try{
                            rm=connect({hostname:ad,port:pt});
                            await rm.opened;
                        }catch{
                            rm=await socks5Connect(s5,ad,pt);
                        }
                    }
                    
                    const wr=rm.writable.getWriter();
                    await wr.write(pl);
                    wr.releaseLock();
                    let sent=0;
                    rm.readable.pipeTo(new WritableStream({
                        write(ch){
                            if(ws.readyState!==1)return;
                            const c=new Uint8Array((sent?0:2)+ch.length);
                            if(!sent){c.set(h,0);c.set(ch,2);sent=1}else c.set(ch,0);
                            ws.send(c);
                        },
                        close:()=>ws.readyState===1&&ws.close(),
                        abort:()=>ws.readyState===1&&ws.close()
                    })).catch(()=>{});
                }catch{
                    ws.close(1011,'Connect failed');
                }
            }
        })).catch(()=>{});
        return new Response(null,{status:101,webSocket:cl});
    }
};
