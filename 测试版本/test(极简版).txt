import{connect as C}from'cloudflare:sockets'
const U='aaa6b096-1165-4bbe-935c-99f4ec902d02',P='ikun',N='IKUN-Vless',X='sjc.o00o.ooo:443',B=['developers.cloudflare.com','ip.sb','www.visa.cn'],I=new Uint8Array(U.replace(/-/g,'').match(/.{2}/g).map(x=>parseInt(x,16)))
const b=s=>{if(!s)return new Uint8Array();s=s.replace(/-/g,'+').replace(/_/g,'/');while(s.length%4)s+='=';return Uint8Array.from(atob(s),c=>c.charCodeAt(0))}
const q=g=>{const d=new Uint8Array(g),o=18+(d[17]||0)+1,p=(d[o]<<8)|d[o+1];let i=o+3,t=d[o+2],h;if(t===1)h=`${d[i++]}.${d[i++]}.${d[i++]}.${d[i++]}`;else if(t===2){const l=d[i++];h=new TextDecoder().decode(d.subarray(i,i+l));i+=l}else{h=Array.from({length:8},(_,j)=>((d[i+2*j]<<8)|d[i+2*j+1]).toString(16)).join(':');i+=16}return{h,p,d:d.slice(i)}}
const T=async(h,p,m)=>{let s;try{s=C({hostname:h,port:p});await Promise.race([s.opened,new Promise((_,r)=>setTimeout(()=>r(1),m))]);return s}catch(e){try{s&&s.close()}catch{}return null}}
const Nn=async(h,p)=>{let s=await T(h,p,1000);if(s)return s;const[a,b]=X.split(':');s=await T(a,+b||p,2000);if(s)return s;throw 0}
export default{async fetch(R){try{const u=new URL(R.url),H=R.headers.get('Host')||'x'
if(R.headers.get('Upgrade')==='websocket'){const proto=R.headers.get('sec-websocket-protocol')||'';if(proto.length<24)return new Response(null,{status:400});let D;try{D=b(proto)}catch{return new Response(null,{status:400})}if(D.length<18||!D.slice(1,17).every((v,i)=>v===I[i]))return new Response(null,{status:400});const{h,p,d}=q(D.buffer);let s;try{s=await Nn(h,p)}catch{return new Response('',{status:502})}const[w,sv]=new WebSocketPair();sv.accept();try{const ww=s.writable.getWriter();sv.send(new Uint8Array([0,0]));if(d&&d.length)await ww.write(d);sv.addEventListener('message',async e=>{try{if(typeof e.data==='string')await ww.write(new TextEncoder().encode(e.data));else await ww.write(new Uint8Array(e.data))}catch{}});s.readable.pipeTo(new WritableStream({write:c=>sv.send(c)})).catch(()=>{})}catch{try{s.close()}catch{}return new Response('',{status:500})}return new Response(null,{status:101,webSocket:w})}
if(u.pathname===`/${P}/vless`){return new Response([...B,`${H}:443`].map(x=>{const[a,p=443]=x.split(':');return`vless://${U}@${a}:${p}?encryption=none&security=tls&type=ws&host=${H}&sni=${H}&path=%2F%3Fed%3D2560#${N}`}).join('\n'))}
return new Response('Not Found',{status:404})}catch{return new Response('Error',{status:500})}}}

