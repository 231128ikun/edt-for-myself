// 常量介绍  U=订阅路径，I=uuid，P=proxyip（反代cf），N=节点名字，S5=socks5（类似proxyip的作用），G=全局socks（所有流量转发）B=优选ip
// 连接逻辑：直连 -> socks5 -> proxyip
// 订阅链接：https://你的域名/U/vless
// 部署时建议删掉注释。
import{connect}from'cloudflare:sockets';

const U='ikun';
const I='aaa6b096-1165-4bbe-935c-99f4ec902d02';
const P='sjc.o00o.ooo:443';
const N='IKUN-Vless';
const S5='socks5://12349:12349@107.163.195.16:10000';
const G=false;
const B=['developers.cloudflare.com','ip.sb','www.visa.cn','ikun.glimmer.cf.090227.xyz'];
const IB=new Uint8Array(I.replace(/-/g,'').match(/.{2}/g).map(x=>parseInt(x,16)));

const b64u=s=>{if(!s)return new Uint8Array();s=s.replace(/-/g,'+').replace(/_/g,'/');while(s.length%4)s+='=';return Uint8Array.from(atob(s),c=>c.charCodeAt(0))};
const parse=buf=>{const d=new Uint8Array(buf),o=18+(d[17]||0)+1,pt=(d[o]<<8)|d[o+1];let p=o+3,t=d[o+2],h;if(t===1)h=`${d[p++]}.${d[p++]}.${d[p++]}.${d[p++]}`;else if(t===2){const l=d[p++];h=new TextDecoder().decode(d.subarray(p,p+l));p+=l}else{h=Array.from({length:8},(_,i)=>((d[p+2*i]<<8)|d[p+2*i+1]).toString(16)).join(':');p+=16}return{h,pt,data:d.slice(p)}};
const s5parse=()=>{const w=S5.slice(9);if(w.includes('@')){const[c,hp]=w.split('@'),[us,ps]=c.split(':'),[h,p=1080]=hp.split(':');return{h,p:+p,us,ps}}const[h,p=1080]=w.split(':');return{h,p:+p,us:'',ps:''}};
const s5conn=async(th,tp,c)=>{const s=connect({hostname:c.h,port:c.p});await s.opened;const w=s.writable.getWriter(),r=s.readable.getReader();try{await w.write(new Uint8Array([5,2,0,2]));let ar=await r.read();if(!ar||ar.done)throw'Invalid';ar=ar.value;if(ar[0]!==5)throw'Invalid';if(ar[1]===2&&c.us){const ub=new TextEncoder().encode(c.us),pb=new TextEncoder().encode(c.ps);await w.write(new Uint8Array([1,ub.length,...ub,pb.length,...pb]));ar=await r.read();if(!ar||ar.done||ar.value[1]!==0)throw'Auth failed'}else if(ar[1]!==0)throw'Auth not supported';const db=new TextEncoder().encode(th);await w.write(new Uint8Array([5,1,0,3,db.length,...db,tp>>8,tp&255]));ar=await r.read();if(!ar||ar.done||ar.value[1]!==0)throw'Connect failed';w.releaseLock();r.releaseLock();return s}catch(e){try{w.releaseLock();r.releaseLock()}catch{}try{s.close()}catch{}throw e}};
const s5c=S5?s5parse():null;
const conn=async(h,pt)=>{const a=[];if(G&&s5c)a.push(()=>s5conn(h,pt,s5c));else{a.push(()=>connect({hostname:h,port:pt}));if(s5c)a.push(()=>s5conn(h,pt,s5c))}if(P){const[ph,pp]=P.split(':');a.push(()=>connect({hostname:ph,port:+pp||pt}))}for(const f of a)try{const s=await f();await s.opened;return s}catch{}throw'All failed'};
export default{async fetch(r){const host=r.headers.get('Host'),u=new URL(r.url);if(r.headers.get('Upgrade')==='websocket'){const pd=b64u(r.headers.get('sec-websocket-protocol')||'');if(pd.length<18||!pd.slice(1,17).every((b,i)=>b===IB[i]))return new Response('',{status:403});const{h,pt,data}=parse(pd.buffer),s=await conn(h,pt),pair=new WebSocketPair(),c=pair[0],sv=pair[1];sv.accept();const w=s.writable.getWriter();try{sv.send(new Uint8Array([0,0]));if(data&&data.length)await w.write(data)}catch{}sv.addEventListener('message',async e=>{try{if(typeof e.data==='string')await w.write(new TextEncoder().encode(e.data));else await w.write(new Uint8Array(e.data))}catch{}});try{s.readable.pipeTo(new WritableStream({write:chunk=>sv.send(chunk)}))}catch{}return new Response(null,{status:101,webSocket:c})}if(u.pathname===`/${U}/vless`)return new Response([...B,`${host}:443`].map(ip=>{const[a,pt=443]=ip.split(':');return`vless://${I}@${a}:${pt}?encryption=none&security=tls&type=ws&host=${host}&sni=${host}&path=%2F%3Fed%3D2560#${N}`}).join('\n'));return new Response('')}}
